[{"name":"AFTER()","description":"dev.cbyrne.injector.position.InjectPosition.InvokePosition.AFTER","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke-position/-a-f-t-e-r/index.html","searchKeys":["AFTER","AFTER()","dev.cbyrne.injector.position.InjectPosition.InvokePosition.AFTER"]},{"name":"BEFORE()","description":"dev.cbyrne.injector.position.InjectPosition.InvokePosition.BEFORE","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke-position/-b-e-f-o-r-e/index.html","searchKeys":["BEFORE","BEFORE()","dev.cbyrne.injector.position.InjectPosition.InvokePosition.BEFORE"]},{"name":"class Invoke(owner: String, name: String, descriptor: String, position: InjectPosition.InvokePosition) : InjectPosition","description":"dev.cbyrne.injector.position.InjectPosition.Invoke","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke/index.html","searchKeys":["Invoke","class Invoke(owner: String, name: String, descriptor: String, position: InjectPosition.InvokePosition) : InjectPosition","dev.cbyrne.injector.position.InjectPosition.Invoke"]},{"name":"data class MethodInjector<Any>(className: String, method: String, descriptor: String, position: InjectPosition, catchLocals: Boolean, catchFields: Boolean, code: Any.(InjectorParams) -> Unit)","description":"dev.cbyrne.injector.provider.MethodInjector","location":"injector/dev.cbyrne.injector.provider/-method-injector/index.html","searchKeys":["MethodInjector","data class MethodInjector<Any>(className: String, method: String, descriptor: String, position: InjectPosition, catchLocals: Boolean, catchFields: Boolean, code: Any.(InjectorParams) -> Unit)","dev.cbyrne.injector.provider.MethodInjector"]},{"name":"enum InvokePosition : Enum<InjectPosition.InvokePosition> ","description":"dev.cbyrne.injector.position.InjectPosition.InvokePosition","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke-position/index.html","searchKeys":["InvokePosition","enum InvokePosition : Enum<InjectPosition.InvokePosition> ","dev.cbyrne.injector.position.InjectPosition.InvokePosition"]},{"name":"fun <Any> MethodInjector(className: String, method: String, descriptor: String, position: InjectPosition, catchLocals: Boolean, catchFields: Boolean, code: Any.(InjectorParams) -> Unit)","description":"dev.cbyrne.injector.provider.MethodInjector.MethodInjector","location":"injector/dev.cbyrne.injector.provider/-method-injector/-method-injector.html","searchKeys":["MethodInjector","fun <Any> MethodInjector(className: String, method: String, descriptor: String, position: InjectPosition, catchLocals: Boolean, catchFields: Boolean, code: Any.(InjectorParams) -> Unit)","dev.cbyrne.injector.provider.MethodInjector.MethodInjector"]},{"name":"fun <T> inject(className: String, method: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: T.(InjectorParams) -> Unit)","description":"dev.cbyrne.injector.Injector.inject","location":"injector/dev.cbyrne.injector/-injector/inject.html","searchKeys":["inject","fun <T> inject(className: String, method: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: T.(InjectorParams) -> Unit)","dev.cbyrne.injector.Injector.inject"]},{"name":"fun <T> injectMethod(className: String, methodName: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: T.(InjectorParams) -> Unit)","description":"dev.cbyrne.injector.dsl.injectMethod","location":"injector/dev.cbyrne.injector.dsl/inject-method.html","searchKeys":["injectMethod","fun <T> injectMethod(className: String, methodName: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: T.(InjectorParams) -> Unit)","dev.cbyrne.injector.dsl.injectMethod"]},{"name":"fun Class<*>.readBytes(): ByteArray","description":"dev.cbyrne.injector.util.readBytes","location":"injector/dev.cbyrne.injector.util/read-bytes.html","searchKeys":["readBytes","fun Class<*>.readBytes(): ByteArray","dev.cbyrne.injector.util.readBytes"]},{"name":"fun ClassNode.addMethod(access: Modifiers, name: String, desc: String, instructions: InsnList? = null, routine: MethodAssembly.() -> Unit? = null)","description":"dev.cbyrne.injector.util.addMethod","location":"injector/dev.cbyrne.injector.util/add-method.html","searchKeys":["addMethod","fun ClassNode.addMethod(access: Modifiers, name: String, desc: String, instructions: InsnList? = null, routine: MethodAssembly.() -> Unit? = null)","dev.cbyrne.injector.util.addMethod"]},{"name":"fun Invoke(owner: String, name: String, descriptor: String, position: InjectPosition.InvokePosition = InvokePosition.BEFORE)","description":"dev.cbyrne.injector.position.InjectPosition.Invoke.Invoke","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke/-invoke.html","searchKeys":["Invoke","fun Invoke(owner: String, name: String, descriptor: String, position: InjectPosition.InvokePosition = InvokePosition.BEFORE)","dev.cbyrne.injector.position.InjectPosition.Invoke.Invoke"]},{"name":"fun Map<*, *>.getOrError(key: String): Any","description":"dev.cbyrne.injector.util.getOrError","location":"injector/dev.cbyrne.injector.util/get-or-error.html","searchKeys":["getOrError","fun Map<*, *>.getOrError(key: String): Any","dev.cbyrne.injector.util.getOrError"]},{"name":"fun afterInvoke(className: String, methodName: String, descriptor: String): InjectPosition.Invoke","description":"dev.cbyrne.injector.dsl.afterInvoke","location":"injector/dev.cbyrne.injector.dsl/after-invoke.html","searchKeys":["afterInvoke","fun afterInvoke(className: String, methodName: String, descriptor: String): InjectPosition.Invoke","dev.cbyrne.injector.dsl.afterInvoke"]},{"name":"fun afterInvoke(method: KFunction<*>): InjectPosition.Invoke","description":"dev.cbyrne.injector.dsl.afterInvoke","location":"injector/dev.cbyrne.injector.dsl/after-invoke.html","searchKeys":["afterInvoke","fun afterInvoke(method: KFunction<*>): InjectPosition.Invoke","dev.cbyrne.injector.dsl.afterInvoke"]},{"name":"fun beforeInvoke(className: String, methodName: String, descriptor: String): InjectPosition.Invoke","description":"dev.cbyrne.injector.dsl.beforeInvoke","location":"injector/dev.cbyrne.injector.dsl/before-invoke.html","searchKeys":["beforeInvoke","fun beforeInvoke(className: String, methodName: String, descriptor: String): InjectPosition.Invoke","dev.cbyrne.injector.dsl.beforeInvoke"]},{"name":"fun beforeInvoke(method: KFunction<*>): InjectPosition.Invoke","description":"dev.cbyrne.injector.dsl.beforeInvoke","location":"injector/dev.cbyrne.injector.dsl/before-invoke.html","searchKeys":["beforeInvoke","fun beforeInvoke(method: KFunction<*>): InjectPosition.Invoke","dev.cbyrne.injector.dsl.beforeInvoke"]},{"name":"fun descriptor(returnType: TypeLike, vararg parameterTypes: TypeLike): String","description":"dev.cbyrne.injector.dsl.descriptor","location":"injector/dev.cbyrne.injector.dsl/descriptor.html","searchKeys":["descriptor","fun descriptor(returnType: TypeLike, vararg parameterTypes: TypeLike): String","dev.cbyrne.injector.dsl.descriptor"]},{"name":"fun inject(className: String, method: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: Any.(InjectorParams) -> Unit)","description":"dev.cbyrne.injector.Injector.inject","location":"injector/dev.cbyrne.injector/-injector/inject.html","searchKeys":["inject","fun inject(className: String, method: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: Any.(InjectorParams) -> Unit)","dev.cbyrne.injector.Injector.inject"]},{"name":"fun injectMethod(className: String, methodName: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: Any.(InjectorParams) -> Unit)","description":"dev.cbyrne.injector.dsl.injectMethod","location":"injector/dev.cbyrne.injector.dsl/inject-method.html","searchKeys":["injectMethod","fun injectMethod(className: String, methodName: String, descriptor: String, position: InjectPosition = InjectPosition.BeforeAll, catchLocals: Boolean = true, catchFields: Boolean = true, code: Any.(InjectorParams) -> Unit)","dev.cbyrne.injector.dsl.injectMethod"]},{"name":"object BeforeAll : InjectPosition","description":"dev.cbyrne.injector.position.InjectPosition.BeforeAll","location":"injector/dev.cbyrne.injector.position/-inject-position/-before-all/index.html","searchKeys":["BeforeAll","object BeforeAll : InjectPosition","dev.cbyrne.injector.position.InjectPosition.BeforeAll"]},{"name":"object BeforeTail : InjectPosition","description":"dev.cbyrne.injector.position.InjectPosition.BeforeTail","location":"injector/dev.cbyrne.injector.position/-inject-position/-before-tail/index.html","searchKeys":["BeforeTail","object BeforeTail : InjectPosition","dev.cbyrne.injector.position.InjectPosition.BeforeTail"]},{"name":"object Injector","description":"dev.cbyrne.injector.Injector","location":"injector/dev.cbyrne.injector/-injector/index.html","searchKeys":["Injector","object Injector","dev.cbyrne.injector.Injector"]},{"name":"object InjectorClassTransformer : IClassTransformer","description":"dev.cbyrne.injector.transform.InjectorClassTransformer","location":"injector/dev.cbyrne.injector.transform/-injector-class-transformer/index.html","searchKeys":["InjectorClassTransformer","object InjectorClassTransformer : IClassTransformer","dev.cbyrne.injector.transform.InjectorClassTransformer"]},{"name":"open class InjectorParams","description":"dev.cbyrne.injector.provider.InjectorParams","location":"injector/dev.cbyrne.injector.provider/-injector-params/index.html","searchKeys":["InjectorParams","open class InjectorParams","dev.cbyrne.injector.provider.InjectorParams"]},{"name":"open class ReturnInfo","description":"dev.cbyrne.injector.provider.ReturnInfo","location":"injector/dev.cbyrne.injector.provider/-return-info/index.html","searchKeys":["ReturnInfo","open class ReturnInfo","dev.cbyrne.injector.provider.ReturnInfo"]},{"name":"open fun InjectorParams(params: List<Any>, fields: Map<String, Any>, retInfo: ReturnInfo)","description":"dev.cbyrne.injector.provider.InjectorParams.InjectorParams","location":"injector/dev.cbyrne.injector.provider/-injector-params/-injector-params.html","searchKeys":["InjectorParams","open fun InjectorParams(params: List<Any>, fields: Map<String, Any>, retInfo: ReturnInfo)","dev.cbyrne.injector.provider.InjectorParams.InjectorParams"]},{"name":"open fun ReturnInfo()","description":"dev.cbyrne.injector.provider.ReturnInfo.ReturnInfo","location":"injector/dev.cbyrne.injector.provider/-return-info/-return-info.html","searchKeys":["ReturnInfo","open fun ReturnInfo()","dev.cbyrne.injector.provider.ReturnInfo.ReturnInfo"]},{"name":"open fun ReturnInfo(cancelled: Boolean, returnValue: Any)","description":"dev.cbyrne.injector.provider.ReturnInfo.ReturnInfo","location":"injector/dev.cbyrne.injector.provider/-return-info/-return-info.html","searchKeys":["ReturnInfo","open fun ReturnInfo(cancelled: Boolean, returnValue: Any)","dev.cbyrne.injector.provider.ReturnInfo.ReturnInfo"]},{"name":"open fun ReturnInfo(returnValue: Any)","description":"dev.cbyrne.injector.provider.ReturnInfo.ReturnInfo","location":"injector/dev.cbyrne.injector.provider/-return-info/-return-info.html","searchKeys":["ReturnInfo","open fun ReturnInfo(returnValue: Any)","dev.cbyrne.injector.provider.ReturnInfo.ReturnInfo"]},{"name":"open fun cancel(value: Any)","description":"dev.cbyrne.injector.provider.ReturnInfo.cancel","location":"injector/dev.cbyrne.injector.provider/-return-info/cancel.html","searchKeys":["cancel","open fun cancel(value: Any)","dev.cbyrne.injector.provider.ReturnInfo.cancel"]},{"name":"open fun component1(): Boolean","description":"dev.cbyrne.injector.provider.ReturnInfo.component1","location":"injector/dev.cbyrne.injector.provider/-return-info/component1.html","searchKeys":["component1","open fun component1(): Boolean","dev.cbyrne.injector.provider.ReturnInfo.component1"]},{"name":"open fun component1(): List<Any>","description":"dev.cbyrne.injector.provider.InjectorParams.component1","location":"injector/dev.cbyrne.injector.provider/-injector-params/component1.html","searchKeys":["component1","open fun component1(): List<Any>","dev.cbyrne.injector.provider.InjectorParams.component1"]},{"name":"open fun component2(): Any","description":"dev.cbyrne.injector.provider.ReturnInfo.component2","location":"injector/dev.cbyrne.injector.provider/-return-info/component2.html","searchKeys":["component2","open fun component2(): Any","dev.cbyrne.injector.provider.ReturnInfo.component2"]},{"name":"open fun component2(): Map<String, Any>","description":"dev.cbyrne.injector.provider.InjectorParams.component2","location":"injector/dev.cbyrne.injector.provider/-injector-params/component2.html","searchKeys":["component2","open fun component2(): Map<String, Any>","dev.cbyrne.injector.provider.InjectorParams.component2"]},{"name":"open fun component3(): ReturnInfo","description":"dev.cbyrne.injector.provider.InjectorParams.component3","location":"injector/dev.cbyrne.injector.provider/-injector-params/component3.html","searchKeys":["component3","open fun component3(): ReturnInfo","dev.cbyrne.injector.provider.InjectorParams.component3"]},{"name":"open fun getReturnInfo(): ReturnInfo","description":"dev.cbyrne.injector.provider.InjectorParams.getReturnInfo","location":"injector/dev.cbyrne.injector.provider/-injector-params/get-return-info.html","searchKeys":["getReturnInfo","open fun getReturnInfo(): ReturnInfo","dev.cbyrne.injector.provider.InjectorParams.getReturnInfo"]},{"name":"open override fun transformClass(redefinedClass: Class<*>?, classLoader: ClassLoader?, className: String, protectionDomain: ProtectionDomain?, classBuffer: ByteArray): ByteArray?","description":"dev.cbyrne.injector.transform.InjectorClassTransformer.transformClass","location":"injector/dev.cbyrne.injector.transform/-injector-class-transformer/transform-class.html","searchKeys":["transformClass","open override fun transformClass(redefinedClass: Class<*>?, classLoader: ClassLoader?, className: String, protectionDomain: ProtectionDomain?, classBuffer: ByteArray): ByteArray?","dev.cbyrne.injector.transform.InjectorClassTransformer.transformClass"]},{"name":"private open val cancelled: Boolean","description":"dev.cbyrne.injector.provider.ReturnInfo.cancelled","location":"injector/dev.cbyrne.injector.provider/-return-info/cancelled.html","searchKeys":["cancelled","private open val cancelled: Boolean","dev.cbyrne.injector.provider.ReturnInfo.cancelled"]},{"name":"private open val returnValue: Any","description":"dev.cbyrne.injector.provider.ReturnInfo.returnValue","location":"injector/dev.cbyrne.injector.provider/-return-info/return-value.html","searchKeys":["returnValue","private open val returnValue: Any","dev.cbyrne.injector.provider.ReturnInfo.returnValue"]},{"name":"private val fields: Map<String, Any>","description":"dev.cbyrne.injector.provider.InjectorParams.fields","location":"injector/dev.cbyrne.injector.provider/-injector-params/fields.html","searchKeys":["fields","private val fields: Map<String, Any>","dev.cbyrne.injector.provider.InjectorParams.fields"]},{"name":"private val params: List<Any>","description":"dev.cbyrne.injector.provider.InjectorParams.params","location":"injector/dev.cbyrne.injector.provider/-injector-params/params.html","searchKeys":["params","private val params: List<Any>","dev.cbyrne.injector.provider.InjectorParams.params"]},{"name":"sealed class InjectPosition","description":"dev.cbyrne.injector.position.InjectPosition","location":"injector/dev.cbyrne.injector.position/-inject-position/index.html","searchKeys":["InjectPosition","sealed class InjectPosition","dev.cbyrne.injector.position.InjectPosition"]},{"name":"val beforeAll: InjectPosition.BeforeAll","description":"dev.cbyrne.injector.dsl.beforeAll","location":"injector/dev.cbyrne.injector.dsl/before-all.html","searchKeys":["beforeAll","val beforeAll: InjectPosition.BeforeAll","dev.cbyrne.injector.dsl.beforeAll"]},{"name":"val beforeTail: InjectPosition.BeforeTail","description":"dev.cbyrne.injector.dsl.beforeTail","location":"injector/dev.cbyrne.injector.dsl/before-tail.html","searchKeys":["beforeTail","val beforeTail: InjectPosition.BeforeTail","dev.cbyrne.injector.dsl.beforeTail"]},{"name":"val catchFields: Boolean","description":"dev.cbyrne.injector.provider.MethodInjector.catchFields","location":"injector/dev.cbyrne.injector.provider/-method-injector/catch-fields.html","searchKeys":["catchFields","val catchFields: Boolean","dev.cbyrne.injector.provider.MethodInjector.catchFields"]},{"name":"val catchLocals: Boolean","description":"dev.cbyrne.injector.provider.MethodInjector.catchLocals","location":"injector/dev.cbyrne.injector.provider/-method-injector/catch-locals.html","searchKeys":["catchLocals","val catchLocals: Boolean","dev.cbyrne.injector.provider.MethodInjector.catchLocals"]},{"name":"val className: String","description":"dev.cbyrne.injector.provider.MethodInjector.className","location":"injector/dev.cbyrne.injector.provider/-method-injector/class-name.html","searchKeys":["className","val className: String","dev.cbyrne.injector.provider.MethodInjector.className"]},{"name":"val code: Any.(InjectorParams) -> Unit","description":"dev.cbyrne.injector.provider.MethodInjector.code","location":"injector/dev.cbyrne.injector.provider/-method-injector/code.html","searchKeys":["code","val code: Any.(InjectorParams) -> Unit","dev.cbyrne.injector.provider.MethodInjector.code"]},{"name":"val descriptor: String","description":"dev.cbyrne.injector.position.InjectPosition.Invoke.descriptor","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke/descriptor.html","searchKeys":["descriptor","val descriptor: String","dev.cbyrne.injector.position.InjectPosition.Invoke.descriptor"]},{"name":"val descriptor: String","description":"dev.cbyrne.injector.provider.MethodInjector.descriptor","location":"injector/dev.cbyrne.injector.provider/-method-injector/descriptor.html","searchKeys":["descriptor","val descriptor: String","dev.cbyrne.injector.provider.MethodInjector.descriptor"]},{"name":"val method: String","description":"dev.cbyrne.injector.provider.MethodInjector.method","location":"injector/dev.cbyrne.injector.provider/-method-injector/method.html","searchKeys":["method","val method: String","dev.cbyrne.injector.provider.MethodInjector.method"]},{"name":"val methodInjectors: MutableList<MethodInjector<*>>","description":"dev.cbyrne.injector.transform.InjectorClassTransformer.methodInjectors","location":"injector/dev.cbyrne.injector.transform/-injector-class-transformer/method-injectors.html","searchKeys":["methodInjectors","val methodInjectors: MutableList<MethodInjector<*>>","dev.cbyrne.injector.transform.InjectorClassTransformer.methodInjectors"]},{"name":"val name: String","description":"dev.cbyrne.injector.position.InjectPosition.Invoke.name","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke/name.html","searchKeys":["name","val name: String","dev.cbyrne.injector.position.InjectPosition.Invoke.name"]},{"name":"val owner: String","description":"dev.cbyrne.injector.position.InjectPosition.Invoke.owner","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke/owner.html","searchKeys":["owner","val owner: String","dev.cbyrne.injector.position.InjectPosition.Invoke.owner"]},{"name":"val position: InjectPosition","description":"dev.cbyrne.injector.provider.MethodInjector.position","location":"injector/dev.cbyrne.injector.provider/-method-injector/position.html","searchKeys":["position","val position: InjectPosition","dev.cbyrne.injector.provider.MethodInjector.position"]},{"name":"val position: InjectPosition.InvokePosition","description":"dev.cbyrne.injector.position.InjectPosition.Invoke.position","location":"injector/dev.cbyrne.injector.position/-inject-position/-invoke/position.html","searchKeys":["position","val position: InjectPosition.InvokePosition","dev.cbyrne.injector.position.InjectPosition.Invoke.position"]}]
